package main

import (
    "errors"
    "fmt"
    "gorm.io/driver/mysql"
    "gorm.io/gorm"
    "log"
    "your_project/models"
)

func processRequest(db *gorm.DB, terminalID string) (string, error) {
    var terminal models.PosTerminal

    // تراکنش برای اتمیک بودن
    err := db.Transaction(func(tx *gorm.DB) error {
        // قفل رکورد برای به‌روزرسانی
        if err := tx.Clauses(gorm.Locking{Strength: "UPDATE"}).
            Where("terminal_id = ?", terminalID).First(&terminal).Error; err != nil {

            if errors.Is(err, gorm.ErrRecordNotFound) {
                // ترمینال جدید، ایجاد رکورد با used_requests=1
                terminal = models.PosTerminal{
                    TerminalID:   terminalID,
                    UsedRequests: 1,
                    MaxRequests:  1000,
                }
                if err := tx.Create(&terminal).Error; err != nil {
                    return err
                }
                return nil
            }
            return err
        }

        if terminal.UsedRequests >= terminal.MaxRequests {
            return errors.New("سهمیه درخواست این پوز تمام شده")
        }

        // افزایش شمارنده
        if err := tx.Model(&terminal).
            Update("used_requests", gorm.Expr("used_requests + ?", 1)).Error; err != nil {
            return err
        }

        return nil
    })

    if err != nil {
        return "", err
    }

    return "درخواست پذیرفته شد", nil
}

func main() {
    dsn := "user:pass@tcp(localhost:3306)/dbname?charset=utf8mb4&parseTime=True&loc=Local"
    db, err := gorm.Open(mysql.Open(dsn), &gorm.Config{})
    if err != nil {
        log.Fatal(err)
    }

    msg, err := processRequest(db, "POS-123")
    if err != nil {
        fmt.Println("خطا:", err)
    } else {
        fmt.Println(msg)
    }
}